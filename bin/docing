#!/usr/bin/env node

// #DocIng
// 
// Auto generate documents for your codes. Any language and any format can be covered by DocIng.
// 
// **Author**: DanielZhu(enterzhu@gmail.com)
// **Datae**: 2014/07/19
// 
// Copyright 2014. Zhu Meng Dan

var fse = require('fs-extra');
var path = require('path');
var sys=require('sys');
var program = require('commander');
// var jstree=require('jstree');
var split = require('../libs/split');
var output = require('../libs/output');
var lang = require('../libs/lang');



/**
 * Module dependencies.
 */

program
  .version('0.0.1')
  .usage('[options] <files or dirs>')
  .option('-p, --peppers', 'Add peppers')
  .option('-P, --pineapple', 'Add pineapple')
  .option('-b, --bbq', 'Add bbq sauce')
  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')
  .parse(process.argv);

console.log(' args: %j', program.args)
console.log('you ordered a pizza with:');
if (program.peppers) console.log('  - peppers');
if (program.pineapple) console.log('  - pineapple');
if (program.bbq) console.log('  - bbq');
console.log('  - %s cheese', program.cheese);


var folderPath = 'C:/staydan.com/Docing/test';
var filesQueue = [];
var outputFileTree = {};

var createNode = function (text, path, folderFlag) {
  var node = {};
  var nodeStatus = {};

  // nodeStatus['opened'] = false;
  // nodeStatus['disabled'] = false;
  // nodeStatus['selected'] = false;

  // node['id'] = 0;
  node['text'] = text;
  node['icon'] = (folderFlag ? 'jstree-default-small jstree-folder' : 'jstree-default-small jstree-file');
  node['children'] = [];
  // node['li_attr'] = [];
  // node['a_attr'] = [];
  // node['a_attr']['href'] = path;
  // node['state'] = nodeStatus;

  return node;
}

// Expected format of the node (there are no required fields)
// {
//   id          : "string" // will be autogenerated if omitted
//   text        : "string" // node text
//   icon        : "string" // string for custom
//   state       : {
//     opened    : boolean  // is the node open
//     disabled  : boolean  // is the node disabled
//     selected  : boolean  // is the node selected
//   },
//   children    : []  // array of strings or objects
//   li_attr     : {}  // attributes for the generated LI node
//   a_attr      : {}  // attributes for the generated A node
// }

// Create the folder if not existing
// {"errno":34,"code":"ENOENT","path":"c:\\staydan.com\\Docing\\docs"}
var createDocFolder = function () {
  fse.readdir(folderPath + '/docs', function(err, files) {
    console.log(JSON.stringify(err));
    if (err !== null) {
      fse.mkdir(folderPath + '/docs', '0777', function() {
        analyzeFileStructure();
      });
    } else {
      analyzeFileStructure();
    }
  });
}

var translateFile = function (filePath) {
  var extName = path.extname(filePath);
  var fileName = path.basename(filePath, extName);
  var readStream = null;
  var outputList = [];

  fse.stat(filePath, function(err, stats) {
    if (filesQueue.length > 0) {
      if (stats.isFile()) {
        var langConfig = lang.loadLangConfigByExtName(extName);
        if (langConfig.error !== undefined) {
          console.log(langConfig.error);
        } else {
          fse.readFile(filePath, {encoding: 'utf8', autoClose: true}, function (err, data) {
            console.log('got %d bytes of data', data.length);

            outputList = split.splitOutSrc(data, langConfig);
            output.renderHtml(outputList, langConfig, path.dirname(filePath) + '/docs/', fileName + '.d.html');
            fse.open(path.dirname(filePath) + '/docs/' + fileName + '.d.html', 'w+', '0777', function(err, fd) {
              fse.closeSync(fd);
            });
          });
          readStream = fse.createReadStream(filePath, {encoding: 'utf8', autoClose: true});

          readStream.on('data', function(chunk) {
            console.log('got %d bytes of data', chunk.length);
            outputList = split.splitOutSrc(chunk, extName);
            output.renderHtml(outputList, path.dirname(filePath) + '/docs/', fileName + '.d.html');
          });

          readStream.on('end', function() {
            console.log('there will be no more data.');
          });
          fse.readFile(filePath, 'utf8', function(err, data) {
            if (err) {
              throw err;
            }
            console.log(data);
          });
        }
      }
      // if (i + 1 < filesQueue.length) {
      //   translateFile(i + 1);
      // }
    }
  });

};

// Read the directory 'Docing/js/'
var analyzeFileStructure = function (filePath, nodeParent) {
  console.log('filePath: ' + filePath);
  // console.log('nodeParent: ' + JSON.stringify(nodeParent));

  var files = fse.readdirSync(filePath);
  console.log(JSON.stringify(files));
      
  var nodeRoot = {};
  var filePaths = filePath.split('/');
  var folderName = filePaths[filePaths.length - 1];

  if (nodeParent !== undefined) {
    nodeRoot = nodeParent;
    // console.log('nodeRoot 1: ' + JSON.stringify(nodeRoot));
  } else {
    nodeRoot = createNode(folderName, filePath, true);
    // console.log('nodeRoot 2: ' + JSON.stringify(nodeRoot));
  }

  if (files !== null && files.length > 0) {
    for (var i = 0; i < files.length; i++) {
      var file = filePath + '/' + files[i];
      var stats = fse.statSync(file);
      if (stats !== null) {
        var node = null;

        if (stats.isFile()) {
          node = createNode(files[i], file, false);
          translateFile(file);
          // If nodeParent passed and not null, all the node created here should be push into it.
          // if (nodeRoot !== null) {
          nodeRoot.children.push(node);
          // }
        } else if (stats.isDirectory()) {
          node = createNode(files[i], file, true);
          nodeRoot.children.push(analyzeFileStructure(file, node));
        }
      }
    }
  } else {
    // if (nodeParent !== null) {
    //   nodeRoot.children.push(createNode(filePaths[filePaths.length - 1], filePath));
    // }
  }

  // console.log(JSON.stringify(nodeRoot));
  return nodeRoot;
}

sys.debug("Starting ...");


// fse.writeFileSync('C:/staydan.com/libs/docs/tree.json', JSON.stringify(analyzeFileStructure(folderPath)), {encoding: 'utf8'});

sys.debug("The End ...");
